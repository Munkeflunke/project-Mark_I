// Globale variabler og v√¶rdier
// S√¶tter en global RNG1 (Random Number Generator 1) til en tilf√¶ldig v√¶rdi mellem 1 og 20
let RNG1 = Math.floor(Math.random() * 20) + 1;
// S√¶tter en score med startv√¶rdi 0
let elementScore = 0;
// S√¶tter en highscore, der starter p√• et h√∏jt tal, s√• den altid kan sl√•s
let elementHighsScore = 999;
// Initialiserer en global variabel til timeren, s√• den kan bruges flere steder
let time = null;
// S√¶tter timeren til at starte p√• 0 sekunder
let timeSeconds = 0;
// S√¶tter den hurtigste tid til et h√∏jt tal, s√• den kan sl√•s
let fastestTime = 999;
// queryselectors  i "rigtig" r√¶kkef√∏lge"
//Guides fra https://codedamn.com/news/javascript/how-to-select-and-manipulate-dom-elements-in-javascript#what_is_the_document_object_model_dom
// V√¶lger 'Again' knappen fra DOM
const buttonAgain = document.querySelector("button.btn.again");

// V√¶lger class elementet, der viser det tilf√¶ldige tal
const rngNumber = document.querySelector(".number");

// V√¶lger 'Check' knappen
const checkGuess = document.querySelector(".btn.check");

// V√¶lger inputfeltet for brugerens g√¶t
const userGuess = document.querySelector(".guess");

// V√¶lger class elementet til feedback beskeder
const message = document.querySelector(".message");

// V√¶lger class elementet til at vise scoren
const userScore = document.querySelector(".label-score");

// V√¶lger class elementet til at vise highscoren
const userHighScore = document.querySelector(".label-highscore");

// V√¶lger timerens display class elementet
const timer = document.querySelector(".timer");

// V√¶lger rekordtimerens display class elementet
const recordTimer = document.querySelector(".recordTimer");

// V√¶lger listen over tidligere g√¶t
const getHistory = document.querySelector(".historyList");

// V√¶lger lydelementet for forkerte g√¶t p√• class
const wrongAudio = document.querySelector('.wrongAudio');

// V√¶lger lydelementet for korrekte g√¶t p√• class
const correctAudio = document.querySelector('.correctAudio');

// V√¶lger lydelementet for n√¶sten korrekte g√¶t p√• class
const closeAudio = document.querySelector('.closeAudio');


console.log(`Det tilf√¶ldige tal er: ${RNG1}`);


// Timer funktionen/hjulet

// Funktion til at opdatere timeren hvert sekund/inkrimentere
const timeLoop = function() {
    // Inkrementerer timeSeconds med 1 hvert sekund
    timeSeconds += 1;
    // Opdaterer timerens visning
    updateTimerDisplay();
};

// Funktion til at starte timeren
const startTimer = function() {
    // Sikrer, at der ikke allerede k√∏rer en timer
    if (time === null) {
        // Starter timeLoop, som k√∏rer hvert sekund
        time = setInterval(timeLoop, 1000);
    }
};
//brug af arrays fx som logoer https://www.w3schools.com/js/js_arrays.asp
// Funktion til at opdatere timerens visning
const logo = (timeSeconds % 2 === 0) ? '‚è≥' : '‚åõ';
// array af loger
const updateTimerDisplay = function() {
    // V√¶lg ikon ('‚è≥' hvis timeSeconds er lige, '‚åõ' hvis timeSeconds er ulige)
    let logo;
    if (timeSeconds % 2 === 0) {logo = '‚è≥';} else {logo = '‚åõ'; // s√• hvert sekund skifter den mellem vores logoer i arrayet
    }
    // Opdaterer timerens tekstindhold med ikonet og den aktuelle tid
    timer.textContent = `${logo} Current time: ${timeSeconds}sec`;
};

// Funktion til at opdatere rekordtiden
const updateRecordTimer = function() {
    // Opdaterer fastestTime med den aktuelle timeSeconds
    fastestTime = timeSeconds;
    // Opdaterer rekordtimerens tekstindhold
    recordTimer.textContent = `üèÜ Current time: ${timeSeconds}sec`;
};

// Funktion til at stoppe timeren
const stopTime = function() {
    // Stopper intervallet
    clearInterval(time);
    // Nulstiller time variablen
    time = null;
    // Opdaterer timerens tekstindhold
    timer.textContent = `‚è≥ Current time: ${timeSeconds}sec`;
};

// **Spilfunktioner**

// Funktion til at generere en ny RNG1 og nulstille spillet
const getRNG1 = function() {
    // Genererer et nyt tilf√¶ldigt tal til RNG1
    RNG1 = Math.floor(Math.random() * 20) + 1;
    // Logger det nye tilf√¶ldige tal for testform√•l
    console.log("Nyt tilf√¶ldigt tal (RNG1):", RNG1);
    // S√¶tter displaytallet tilbage til '?'
    rngNumber.textContent = "?";
    // Nulstiller tekstfarven til sort
    rngNumber.style.textContent = "black";
    // S√¶tter baggrundsfarven tilbage til gr√•
    rngNumber.style.backgroundColor = "#eee";
    // Nulstiller scoren til 0
    elementScore = 0;
    // Opdaterer scorevisningen
    userScore.textContent = "üíØ Tries: " + elementScore;
    // Nulstiller tiden til 0
    timeSeconds = 0;
    // T√∏mmer brugerens g√¶t inputfelt
    userGuess.value = "";
    // Starter timeren igen
    startTimer();
};

// Tilf√∏jer event listener til 'Again' knappen for at nulstille spillet
buttonAgain.addEventListener("click", getRNG1);

// **Funktioner der h√•ndterer g√¶t udfald**

// Funktion n√•r g√¶ttet er for lavt
const tooLow = function() {
    // Henter brugerens g√¶t
    const userGuessValue = userGuess.value;
    // Viser besked om, at g√¶ttet er for lavt
    message.textContent = "The number " + userGuessValue + " is too low";
    // Viser brugerens g√¶t p√• sk√¶rmen
    rngNumber.textContent = userGuessValue;
    // √òger scoren med 1
    elementScore = elementScore + 1;
    // Logger den aktuelle score
    console.log("Nuv√¶rende score:", elementScore);
    // √Ündrer baggrundsfarven til r√∏d
    rngNumber.style.backgroundColor = "red";
    // Opdaterer scorevisningen
    userScore.textContent = "üíØ Tries: " + elementScore;
    // Afspiller lyden for forkert g√¶t
    wrongAudio.play();
    // Returnerer den opdaterede score
    return elementScore;
};

// Funktion n√•r g√¶ttet er for h√∏jt
const tooHigh = function() {
    // Henter brugerens g√¶t
    const userGuessValue = userGuess.value;
    // Viser besked om, at g√¶ttet er for h√∏jt
    message.textContent = "The number " + userGuessValue + " is too high";
    // √òger scoren med 1
    elementScore = elementScore + 1;
    // Logger den aktuelle score
    console.log("Nuv√¶rende score:", elementScore);
    // Viser brugerens g√¶t p√• sk√¶rmen
    rngNumber.textContent = userGuessValue;
    // √Ündrer baggrundsfarven til r√∏d
    rngNumber.style.backgroundColor = "red";
    // Opdaterer scorevisningen
    userScore.textContent = "üíØ Tries: " + elementScore;
    // Afspiller lyden for forkert g√¶t
    wrongAudio.play();
    // Returnerer den opdaterede score
    return elementScore;
};

// Funktion n√•r g√¶ttet er korrekt
const correctGuess = function() {
    // Henter brugerens g√¶t
    const userGuessValue = userGuess.value;
    // Viser besked om, at g√¶ttet er korrekt
    message.textContent = "The number " + userGuessValue + " is correct";
    // Viser brugerens g√¶t p√• sk√¶rmen
    rngNumber.textContent = userGuessValue;
    // √Ündrer baggrundsfarven til gr√∏n
    rngNumber.style.backgroundColor = "green";
    // Afspiller lyden for korrekt g√¶t
    correctAudio.play();
    // Opdaterer rekordtiden, hvis det er den hurtigste
    if (fastestTime > timeSeconds)
        updateRecordTimer();
    // Opdaterer highscore, hvis scoren er bedre
    if (elementHighsScore > elementScore)
        updateHighscore();
    // Stopper timeren
    stopTime();
};

// Funktion n√•r g√¶ttet er forkert men gyldigt
const wrongGuess = function() {
    // Henter brugerens g√¶t
    const userGuessValue = userGuess.value;
    // Viser besked om, at g√¶ttet er forkert
    message.textContent = "The number " + userGuessValue + " is not correct";
    // √òger scoren med 1
    elementScore = elementScore + 1;
    // Viser brugerens g√¶t p√• sk√¶rmen
    rngNumber.textContent = userGuessValue;
    // Logger den aktuelle score
    console.log("Nuv√¶rende score:", elementScore);
    // √Ündrer baggrundsfarven til r√∏d
    rngNumber.style.backgroundColor = "red";
    // Opdaterer scorevisningen
    userScore.textContent = "üíØ Tries: " + elementScore;
    // Afspiller lyden for forkert g√¶t
    wrongAudio.play();
    // Returnerer den opdaterede score
    return elementScore;
};

// Funktion n√•r g√¶ttet er t√¶t p√• det korrekte tal
const closeGuess = function() {
    // Henter brugerens g√¶t
    const userGuessValue = userGuess.value;
    // Viser besked om, at g√¶ttet er t√¶t p√•
    message.textContent = "The number " + userGuessValue + " is close but not correct";
    rngNumber.textContent = userGuessValue;
    // √òger scoren med 1
    elementScore = elementScore + 1;
    // √Ündrer baggrundsfarven til gul
    rngNumber.style.backgroundColor = "yellow";
    // Opdaterer scorevisningen
    userScore.textContent = `üíØ Tries: ${elementScore}`;
    // Afspiller lyden for t√¶t g√¶t
    closeAudio.play();
};

// Funktion til at opdatere highscore
const updateHighscore = function() {
    // Opdaterer elementHighsScore med den aktuelle score
    elementHighsScore = elementScore;
    // Opdaterer highscorevisningen
    userHighScore.textContent = "ü•á Fewest tries " + elementHighsScore;
};
// **G√¶t Historik Funktioner**

// Array til at gemme brugerens g√¶t
let guessHistory = [];

// Henter historiklisten fra DOM'en
const historyList = getHistory;

// Maksimum antal g√¶t, vi tillader i historikken
const maxGuesses = 5;

// Funktion til at opdatere historikken med brugerens g√¶t
const updateHistory = function() {
    // Henter brugerens aktuelle g√¶t og tilf√∏jer det til historikken
    const userGuessValue = userGuess.value;
    guessHistory.push(userGuessValue);

    // Opretter et nyt 'li' element for hvert g√¶t
    const listItem = document.createElement('li');
    listItem.textContent = `Guess: ${userGuessValue}`;

    // Tjekker om der allerede er et f√∏rste element i listen
    if (historyList.firstElementChild) {
        // Inds√¶tter elementet i toppen af listen
        historyList.insertBefore(listItem, historyList.firstElementChild);
    } else {
        // Hvis listen er tom, tilf√∏jes elementet i bunden
        historyList.appendChild(listItem);
    }

    // Fjerner det √¶ldste g√¶t, hvis der er flere end det maksimale antal tilladte g√¶t
    if (guessHistory.length > maxGuesses) {
        guessHistory.shift();
        historyList.removeChild(historyList.lastElementChild);
    }
};
// Funktion til at tjekke om g√¶ttet er t√¶t p√• RNG1
const checkCloseGuess = function(userGuessValue, RNG1) {
    // Returnerer true, hvis forskellen er mindre eller lig med 5 og g√¶ttet er positivt
    return Math.abs(userGuessValue - RNG1) <= 5 && userGuessValue > 0;
};

// **Funktion til at tjekke brugerens g√¶t**
const guessCheck1 = function() {
    // Logger antallet af gange der er g√¶ttet
    console.log("G√¶ttet antal gange:", elementScore);
    // Konverterer brugerens g√¶t til et tal
    const userGuessValue = Number(userGuess.value);
    // Tjekker om g√¶ttet er for h√∏jt
    if (userGuessValue > 20) {
        // Kalder funktionen tooHigh
        tooHigh();
        // Logger det tilf√¶ldige tal
        console.log("Tilf√¶ldige tal (RNG1):", RNG1);
        // Opdaterer g√¶t historikken
        updateHistory(userGuessValue);
        // Tjekker om g√¶ttet er for lavt
    } else if (userGuessValue <= 0) {
        // Kalder funktionen tooLow
        tooLow();
        // Logger det tilf√¶ldige tal
        console.log("Tilf√¶ldige tal (RNG1):", RNG1);
        // Opdaterer g√¶t historikken
        updateHistory(userGuessValue);
        // Tjekker om g√¶ttet er korrekt
    } else if (userGuessValue === RNG1) {
        // Kalder funktionen correctGuess
        correctGuess();
        // Logger det tilf√¶ldige tal
        console.log("Tilf√¶ldige tal (RNG1):", RNG1);
        // Tjekker om g√¶ttet er t√¶t p√•
    } else if (checkCloseGuess(userGuessValue, RNG1)) {
        // Kalder funktionen closeGuess
        closeGuess();
        // Logger det tilf√¶ldige tal
        console.log("Tilf√¶ldige tal (RNG1):", RNG1);
        // Opdaterer g√¶t historikken
        updateHistory(userGuessValue);
        // Hvis g√¶ttet er forkert
    } else {
        // Kalder funktionen wrongGuess
        wrongGuess();
        // Logger det tilf√¶ldige tal
        console.log("Tilf√¶ldige tal (RNG1):", RNG1);
        // Opdaterer g√¶t historikken
        updateHistory(userGuessValue);
    }
};

// Tilf√∏jer event listener til 'Check' knappen for at udf√∏re guessCheck1 funktionen ved klik
checkGuess.addEventListener("click", guessCheck1);

// Starter timeren n√•r 'Check' knappen klikkes
checkGuess.addEventListener("click", startTimer());

// Tilf√∏jer event listener for at tillade brugeren at trykke 'Enter' for at indsende deres g√¶t
document.addEventListener('keyup', function(event) {
    // Tjekker om den trykkede tast er 'Enter'
    if (event.code === 'Enter') {
        // Kalder funktionen guessCheck1
        guessCheck1();
    }
});

//brugte inspirationer
console.log(" JavaScript commandlist her: https://cheatsheets-js.com/");
console.log("If/else  functions: https://cheatsheets-js.com/#if-else-switch");
console.log("Html manipulation: https://frontendmasters.com/blog/patterns-for-memory-efficient-dom-manipulation/");
console.log("queries: https://textual.textualize.io/guide/queries/");
console.log("Timer/interval: https://cheatsheets-js.com/#setTimeout-setInterval");
console.log("String manipulation i JavaScript: https://cheatsheets-js.com/#strings");
console.log("Emoji list https://getemoji.com/")
console.log("Events: https://slingacademy.com/article/the-modern-javascript-dom-cheat-sheet/#event-handling");
